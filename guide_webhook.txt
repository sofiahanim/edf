If you want your **local files** to be automatically updated when your **GitHub Actions workflow** updates the repository, we need to adjust the approach. The goal is to ensure that whenever the workflow makes changes to the repository (e.g., updates `dataset/electricity/2025.csv`), those changes are automatically pulled to your local machine.

Here’s how we can achieve that:

---

### **What Needs to Happen?**
1. **GitHub Workflow Updates the Repository**:
   - Your GitHub Actions workflow runs in the cloud and pushes changes to your GitHub repository.

2. **Webhook Notifies Your Local Machine**:
   - A webhook is triggered when the repository is updated, sending a notification to your local machine.

3. **Local Machine Automatically Pulls Changes**:
   - Your local machine listens for webhook notifications and executes a `git pull` to fetch and update local files.

---

### **Final Solution**

To achieve this, follow these steps:

---

### **Step 1: Configure GitHub Actions Workflow**
Update your `.github/workflows/data_extraction.yml` file to ensure changes are committed to the repository:

```yaml
name: Data Extraction

on:
  workflow_dispatch: 
  schedule:
    - cron: '0 1 * * *'  # Runs at 1 AM UTC every day
  push:
    branches:
      - main

jobs:
  data_extraction:
    runs-on: ubuntu-latest  # GitHub-hosted runner

    permissions:
      contents: write  # Allows this workflow to push commits

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11.10  

      - name: Install dependencies
        run: |
          sudo apt-get update
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements_linux.txt

      - name: Run data extraction script
        env:
          REDSHIFT_REGION: ${{ secrets.REDSHIFT_REGION }}
          REDSHIFT_WORKGROUP: ${{ secrets.REDSHIFT_WORKGROUP }}
        run: python scripts/extract_data.py

      - name: Commit and push changes
        run: |
          git add dataset/electricity/2025.csv dataset/weather/2025.csv
          git commit -m "Update datasets" || echo "No changes to commit"
          git push
```

This ensures that any changes made by the workflow (e.g., updating `2025.csv`) are committed to the repository.

---

### **Step 2: Set Up a Webhook in GitHub**
The webhook will notify your local machine when the repository is updated.

1. **Go to GitHub Webhook Settings**:
   - Navigate to your GitHub repository > **Settings > Webhooks** > **Add webhook**.

2. **Add the Webhook**:
   - **Payload URL**: Enter your local server URL (e.g., `http://<your-local-ip>:5000/update`).
   - **Content type**: Choose `application/json`.
   - **Secret**: (Optional) Add a secret for security.
   - **Event types**: Select `push`.

3. **Save the Webhook**.

---

### **Step 3: Set Up a Local Webhook Listener**
Create a Python Flask server to listen for the webhook and pull changes automatically.

#### **webhook_listener.py**
```python
from flask import Flask, request
import os
import subprocess

app = Flask(__name__)

@app.route('/update', methods=['POST'])
def update_repo():
    try:
        # Define the path to your local Git repository
        repo_path = "/mnt/c/Users/hanim/edf"  # Update this to your local repo path

        # Pull the latest changes
        commands = [
            f"cd {repo_path}",
            "git fetch origin main",
            "git reset --hard origin/main"  # Ensure it matches the remote repository
        ]

        for command in commands:
            subprocess.run(command, shell=True, check=True)

        return "Repository updated successfully.", 200
    except Exception as e:
        return f"Error: {str(e)}", 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
```

---

### **Step 4: Expose Your Local Server Using ngrok**
To expose your local Flask server to GitHub, you need to use ngrok:

1. **Start Your Flask Server**:
   ```bash
   python webhook_listener.py
   ```

2. **Start ngrok**:
   ```bash
   ngrok http 5000
   ```

3. **Copy the Public URL**:
   - You’ll see something like:
     ```
     Forwarding                    https://random-string.ngrok.io -> http://localhost:5000
     ```
   - Use the URL `https://random-string.ngrok.io/update` as the webhook **Payload URL** in GitHub.

---

### **Step 5: Test the Setup**
1. **Trigger the Workflow**:
   - Push a change to your GitHub repository or trigger the workflow manually.
   - The workflow will update the repository.

2. **Webhook Notification**:
   - GitHub sends a webhook notification to your local Flask server.

3. **Local Repository Update**:
   - The Flask server executes the `git pull` command to update your local repository with the latest changes.

---

### **Automation Summary**
1. **GitHub Actions Workflow**:
   - Updates the repository with new files.
2. **GitHub Webhook**:
   - Notifies your local machine about updates.
3. **Local Webhook Listener**:
   - Executes `git pull` to update your local repository automatically.

---

### **What You’ve Achieved**
- **Fully Automated Update Process**:
  - Your local files are updated in real-time when the workflow updates the GitHub repository.
- **No Manual Intervention**:
  - No need to run `git pull` manually.

Let me know if you encounter any issues!
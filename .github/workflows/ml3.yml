name: ML Part 3

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 19 * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  ml-evaluation:
    runs-on: ubuntu-20.04

    steps:
    # Step 1: Checkout Repository
    - name: Checkout Repository
      uses: actions/checkout@v3

    # Step 2: Set Up Python
    - name: Set Up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    # Step 3: Install System-Level Dependencies
    - name: Install System-Level Dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y \
          build-essential \
          g++ \
          gcc \
          swig \
          cmake \
          python3-dev \
          python3-pip \
          libopenblas-dev \
          liblapack-dev \
          libatlas-base-dev \
          libffi-dev \
          libssl-dev \
          zlib1g-dev \
          libcurl4-openssl-dev \
          libhdf5-dev \
          libgfortran5 \
          libgomp1

    # Step 4: Upgrade Python Tools
    - name: Upgrade Python Tools
      run: |
        python3 -m pip install --upgrade pip setuptools wheel

    # Step 5: Install Python Dependencies
    - name: Install Python Dependencies
      run: |
        python3 -m pip cache purge
        pip install pip-tools
        pip-compile requirements_linux.txt
        python3 -m pip install --no-cache-dir -r requirements.txt --verbose

    - name: Install Stan via CmdStanPy
      run: |
        python3 -m cmdstanpy.install_cmdstan --version latest || echo "CmdStanPy installation failed. Skipping."
        python3 -c "import cmdstanpy; print(f'CmdStanPy Version: {cmdstanpy.__version__}')"
    


    # Step 7: Test Dependency Installation
    - name: Test Dependency Installation
      run: |
        python3 -c "import pandas, pycaret, numpy, sklearn, tensorflow, darts, pyod, prophet, statsforecast" || exit 1

    # Step 8: Debug Installed Packages
    - name: Debug Installed Packages
      run: |
        python3 -m pip list

    # Step 9: Check Dependency Tree
    - name: Check Dependency Tree
      run: |
        python3 -m pip install pipdeptree
        pipdeptree

    # Step 10: Initialize Required Files and Directories
    - name: Initialize Required Files and Directories
      run: |
        for dir in training validation evaluation; do
            if [ ! -d "$dir" ]; then
                echo "Creating missing directory: $dir"
                mkdir -p "$dir"
            fi
            if ! ls "$dir"/*.csv 1> /dev/null 2>&1; then
                placeholder_file="$dir/placeholder.csv"
                echo "ds,y" > "$placeholder_file"
                echo "Created placeholder file: $placeholder_file"
            else
                echo "Directory $dir already contains files. Skipping placeholder creation."
            fi
        done

    - name: Validate Input Dataset
      run: |
        if [ ! -f "data/merge/allyears.csv" ]; then
        echo "‚ùå Required dataset allyears.csv is missing. Exiting."
        exit 1
        fi
        echo "‚úÖ Dataset allyears.csv is present."

    # Step 11: Verify Metrics Files
    - name: Verify Training Files
      run: |
        if ls training/*.csv 1> /dev/null 2>&1; then
          echo "‚úÖ All training files are present."
        else
          echo "‚ùå Training files are missing."
          exit 1
        fi

    - name: Verify Validation Files
      run: |
        if ls validation/*.csv 1> /dev/null 2>&1; then
          echo "‚úÖ All validation files are present."
        else
          echo "‚ùå Validation files are missing."
          exit 1
        fi

    - name: Verify Evaluation Files
      run: |
        if ls evaluation/*.csv 1> /dev/null 2>&1; then
          echo "‚úÖ All evaluation files are present."
        else
          echo "‚ùå Evaluation files are missing."
          exit 1
        fi

    - name: Debug File Existence
      run: |
        echo "Training files:"
        ls -l training/
        echo "Validation files:"
        ls -l validation/
        echo "Evaluation files:"
        ls -l evaluation/
        echo "Reports directory:"
        ls -l reports/

    # Step 12: Run Model Training Script
    - name: Run Model Training Script
      run: |
        python3 scripts/ml_part_3.py --verbose
      env:
        PYTHONUNBUFFERED: 1
        LOG_LEVEL: DEBUG

    - name: Verify Script Outputs
      run: |
        for file in reports/automl_leaderboard.csv reports/pycaret_predictions.csv; do
            if [ ! -f "$file" ]; then
                echo "‚ùå Missing output: $file"
                exit 1
            else
                echo "‚úÖ Output exists: $file"
            fi
        done
      
    # Step 13: Commit and Push Changes
    - name: Commit and Push Changes
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "GitHub Actions"
        git add training/*.csv validation/*.csv evaluation/*.csv reports/*.csv
        git commit -m "Update results: training, validation, evaluation, and reports" || echo "No changes to commit"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Step 14: Notify Completion
    - name: Notify Completion
      if: success()
      run: echo "üéâ Workflow completed successfully!"
    - name: Notify Failure
      if: failure()
      run: echo "‚ùå Workflow failed. Check logs for details."
